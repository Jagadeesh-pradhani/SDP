<document><component id="root" name="root">
  <component id="system" name="system">
    <!--McPAT will skip the components if number is set to 0 -->
    <param name="number_of_cores" value="16" />
    <param name="number_of_L1Directories" value="0" />
    <param name="number_of_L2Directories" value="0" />
    <param name="number_of_L2s" value="1" />
    <!-- This number means how many L2 clusters in each cluster there can be multiple banks/ports -->
    <param name="Private_L2" value="0" />
    <!--1 Private, 0 shared/coherent -->
    <param name="number_of_L3s" value="0" />
    <!-- This number means how many L3 clusters -->
    <param name="number_of_NoCs" value="1" />
    <param name="homogeneous_cores" value="0" />
    <!--1 means homo -->
    <param name="homogeneous_L2s" value="0" />
    <param name="homogeneous_L1Directories" value="0" />
    <param name="homogeneous_L2Directories" value="0" />
    <param name="homogeneous_L3s" value="0" />
    <param name="homogeneous_ccs" value="0" />
    <!--cache coherence hardware -->
    <param name="homogeneous_NoCs" value="0" />
    <param name="core_tech_node" value="65" />
    <!-- nm -->
    <param name="target_core_clockrate" value="999.9999999999999" />
    <!--MHz -->
    <param name="temperature" value="380" />
    <!-- Kelvin -->
    <param name="number_cache_levels" value="1" />
    <param name="interconnect_projection_type" value="0" />
    <!--0: aggressive wire technology; 1: conservative wire technology -->
    <param name="device_type" value="0" />
    <!--0: HP(High Performance Type); 1: LSTP(Low standby power) 2: LOP (Low Operating Power)  -->
    <param name="longer_channel_device" value="0" />
    <!-- 0 no use; 1 use when possible -->
    <param name="power_gating" value="0" />
    <!-- 0 not enabled; 1 enabled -->
    <param name="machine_bits" value="64" />
    <param name="virtual_address_width" value="64" />
    <param name="physical_address_width" value="52" />
    <param name="virtual_memory_page_size" value="4096" />
    <!-- address width determines the tag_width in Cache, LSQ and buffers in cache controller 
      default value is machine_bits, if not set -->
    <stat name="total_cycles" value="7520202" />
    <stat name="idle_cycles" value="2136138" />
    <stat name="busy_cycles" value="5384064" />
    <!--This page size(B) is complete different from the page size in Main memo section. this page size is the size of 
      virtual memory from OS/Archi perspective; the page size in Main memo section is the actual physical line in a DRAM bank  -->
    <!-- *********************** cores ******************* -->
    <component id="system.core0" name="core0">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the 'system.cpu0.instsIssued'instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="270247" />
      <stat name="int_instructions" value="204602" />
      <stat name="fp_instructions" value="766" />
      <stat name="branch_instructions" value="30449" />
      <stat name="branch_mispredictions" value="2693" />
      <stat name="load_instructions" value="37952" />
      <stat name="store_instructions" value="16274" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="298952" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="438782" />
      <stat name="idle_cycles" value="125150" />
      <stat name="busy_cycles" value="313632" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="588432" />
      <stat name="ROB_writes" value="621775" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="417458" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="218290" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26116" />
      <stat name="fp_rename_writes" value="13656" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="835424" />
      <stat name="inst_window_writes" value="386128" />
      <stat name="inst_window_wakeup_accesses" value="250690" />
      <stat name="fp_inst_window_reads" value="23848" />
      <stat name="fp_inst_window_writes" value="23103" />
      <stat name="fp_inst_window_wakeup_accesses" value="10925" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="327226" />
      <stat name="float_regfile_reads" value="16414" />
      <stat name="int_regfile_writes" value="194364" />
      <stat name="float_regfile_writes" value="9018" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="260184" />
      <stat name="fpu_accesses" value="11979" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core0.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core0.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core0.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20737" />
        <stat name="read_misses" value="1010" />
        <stat name="conflicts" value="stats.system.cpu0.icache.replacements" />
      </component>
      <component id="system.core0.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38227" />
        <stat name="total_misses" value="619" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core0.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />

        <param name="buffer_sizes" value="4,4,4,4" />

        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20034.5" />
        <stat name="write_accesses" value="20034.5" />
        <stat name="read_misses" value="1086.5" />
        <stat name="write_misses" value="1086.5" />
        <stat name="conflicts" value="stats.system.cpu0.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core0.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36041" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core1" name="core1">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="270360" />
      <stat name="int_instructions" value="204832" />

      <stat name="fp_instructions" value="774" />
      <stat name="branch_instructions" value="30545" />
      <stat name="branch_mispredictions" value="2686" />
      <stat name="load_instructions" value="37863" />
      <stat name="store_instructions" value="16276" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="305285" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="443417" />
      <stat name="idle_cycles" value="123399" />
      <stat name="busy_cycles" value="320018" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="595178" />
      <stat name="ROB_writes" value="622644" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="418003" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="218554" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="25983" />
      <stat name="fp_rename_writes" value="13585" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="842093" />
      <stat name="inst_window_writes" value="387029" />
      <stat name="inst_window_wakeup_accesses" value="250887" />
      <stat name="fp_inst_window_reads" value="23797" />
      <stat name="fp_inst_window_writes" value="23045" />
      <stat name="fp_inst_window_wakeup_accesses" value="10891" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="327139" />
      <stat name="float_regfile_reads" value="16367" />
      <stat name="int_regfile_writes" value="194575" />
      <stat name="float_regfile_writes" value="8988" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="260320" />
      <stat name="fpu_accesses" value="11947" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core1.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core1.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core1.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10358.0" />
        <stat name="read_misses" value="509.0" />
        <stat name="conflicts" value="stats.system.cpu1.icache.replacements" />
      </component>
      <component id="system.core1.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38171" />
        <stat name="total_misses" value="656" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core1.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20062.5" />
        <stat name="write_accesses" value="20062.5" />
        <stat name="read_misses" value="1081.5" />
        <stat name="write_misses" value="1081.5" />
        <stat name="conflicts" value="stats.system.cpu1.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core1.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36147" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core2" name="core2">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="271139" />
      <stat name="int_instructions" value="205262" />
      <stat name="fp_instructions" value="772" />
      <stat name="branch_instructions" value="30568" />
      <stat name="branch_mispredictions" value="2696" />
      <stat name="load_instructions" value="38078" />
      <stat name="store_instructions" value="16356" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="309440" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="449528" />
      <stat name="idle_cycles" value="125254" />
      <stat name="busy_cycles" value="324274" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="599876" />
      <stat name="ROB_writes" value="623818" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="418619" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="218782" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26050" />
      <stat name="fp_rename_writes" value="13614" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="847735" />
      <stat name="inst_window_writes" value="388155" />
      <stat name="inst_window_wakeup_accesses" value="251429" />
      <stat name="fp_inst_window_reads" value="23916" />
      <stat name="fp_inst_window_writes" value="23071" />
      <stat name="fp_inst_window_wakeup_accesses" value="10926" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="327941" />
      <stat name="float_regfile_reads" value="16425" />
      <stat name="int_regfile_writes" value="194906" />
      <stat name="float_regfile_writes" value="8986" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="260948" />
      <stat name="fpu_accesses" value="12018" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core2.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core2.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core2.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10396.0" />
        <stat name="read_misses" value="509.5" />
        <stat name="conflicts" value="stats.system.cpu2.icache.replacements" />
      </component>
      <component id="system.core2.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38281" />
        <stat name="total_misses" value="656" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core2.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20059.5" />
        <stat name="write_accesses" value="20059.5" />
        <stat name="read_misses" value="1080.5" />
        <stat name="write_misses" value="1080.5" />
        <stat name="conflicts" value="stats.system.cpu2.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core2.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36203" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core3" name="core3">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="270232" />
      <stat name="int_instructions" value="204676" />
      <stat name="fp_instructions" value="769" />
      <stat name="branch_instructions" value="30517" />
      <stat name="branch_mispredictions" value="2694" />
      <stat name="load_instructions" value="37869" />
      <stat name="store_instructions" value="16290" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="307276" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="452593" />
      <stat name="idle_cycles" value="130525" />
      <stat name="busy_cycles" value="322068" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="596975" />
      <stat name="ROB_writes" value="622273" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="417722" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="218302" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26062" />
      <stat name="fp_rename_writes" value="13620" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="843874" />
      <stat name="inst_window_writes" value="386433" />
      <stat name="inst_window_wakeup_accesses" value="250730" />
      <stat name="fp_inst_window_reads" value="23824" />
      <stat name="fp_inst_window_writes" value="23151" />
      <stat name="fp_inst_window_wakeup_accesses" value="10854" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="327156" />
      <stat name="float_regfile_reads" value="16281" />
      <stat name="int_regfile_writes" value="194377" />
      <stat name="float_regfile_writes" value="8923" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="260122" />
      <stat name="fpu_accesses" value="11964" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core3.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core3.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core3.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10361.5" />
        <stat name="read_misses" value="506.5" />
        <stat name="conflicts" value="stats.system.cpu3.icache.replacements" />
      </component>
      <component id="system.core3.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38219" />
        <stat name="total_misses" value="645" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core3.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20069.5" />
        <stat name="write_accesses" value="20069.5" />
        <stat name="read_misses" value="1086.5" />
        <stat name="write_misses" value="1086.5" />
        <stat name="conflicts" value="stats.system.cpu3.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core3.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36105" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core4" name="core4">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="271313" />
      <stat name="int_instructions" value="205529" />
      <stat name="fp_instructions" value="771" />
      <stat name="branch_instructions" value="30694" />
      <stat name="branch_mispredictions" value="2710" />
      <stat name="load_instructions" value="38051" />
      <stat name="store_instructions" value="16347" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="307707" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="449536" />
      <stat name="idle_cycles" value="126804" />
      <stat name="busy_cycles" value="322732" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="598574" />
      <stat name="ROB_writes" value="624983" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="419459" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="219242" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="25887" />
      <stat name="fp_rename_writes" value="13530" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="846723" />
      <stat name="inst_window_writes" value="388987" />
      <stat name="inst_window_wakeup_accesses" value="251747" />
      <stat name="fp_inst_window_reads" value="23786" />
      <stat name="fp_inst_window_writes" value="23037" />
      <stat name="fp_inst_window_wakeup_accesses" value="10881" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="328324" />
      <stat name="float_regfile_reads" value="16299" />
      <stat name="int_regfile_writes" value="195158" />
      <stat name="float_regfile_writes" value="8953" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="261259" />
      <stat name="fpu_accesses" value="11947" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core4.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core4.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core4.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10492.0" />
        <stat name="read_misses" value="522.5" />
        <stat name="conflicts" value="stats.system.cpu4.icache.replacements" />
      </component>
      <component id="system.core4.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38281" />
        <stat name="total_misses" value="669" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core4.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20046.5" />
        <stat name="write_accesses" value="20046.5" />
        <stat name="read_misses" value="1114.0" />
        <stat name="write_misses" value="1114.0" />
        <stat name="conflicts" value="stats.system.cpu4.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core4.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36378" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core5" name="core5">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="271365" />
      <stat name="int_instructions" value="205389" />
      <stat name="fp_instructions" value="777" />
      <stat name="branch_instructions" value="30633" />
      <stat name="branch_mispredictions" value="2703" />
      <stat name="load_instructions" value="38132" />
      <stat name="store_instructions" value="16298" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="303512" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="451733" />
      <stat name="idle_cycles" value="133315" />
      <stat name="busy_cycles" value="318418" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="594371" />
      <stat name="ROB_writes" value="624862" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="418969" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="218979" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26219" />
      <stat name="fp_rename_writes" value="13703" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="842181" />
      <stat name="inst_window_writes" value="388660" />
      <stat name="inst_window_wakeup_accesses" value="251629" />
      <stat name="fp_inst_window_reads" value="24127" />
      <stat name="fp_inst_window_writes" value="23305" />
      <stat name="fp_inst_window_wakeup_accesses" value="11011" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="328243" />
      <stat name="float_regfile_reads" value="16509" />
      <stat name="int_regfile_writes" value="195134" />
      <stat name="float_regfile_writes" value="9077" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="261155" />
      <stat name="fpu_accesses" value="12118" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core5.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core5.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core5.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10434.5" />
        <stat name="read_misses" value="510.5" />
        <stat name="conflicts" value="stats.system.cpu5.icache.replacements" />
      </component>
      <component id="system.core5.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38430" />
        <stat name="total_misses" value="641" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core5.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20126.5" />
        <stat name="write_accesses" value="20126.5" />
        <stat name="read_misses" value="1097.0" />
        <stat name="write_misses" value="1097.0" />
        <stat name="conflicts" value="stats.system.cpu5.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core5.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36234" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core6" name="core6">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="271208" />
      <stat name="int_instructions" value="205378" />
      <stat name="fp_instructions" value="770" />
      <stat name="branch_instructions" value="30589" />
      <stat name="branch_mispredictions" value="2712" />
      <stat name="load_instructions" value="38094" />
      <stat name="store_instructions" value="16330" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="306876" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="453442" />
      <stat name="idle_cycles" value="131634" />
      <stat name="busy_cycles" value="321808" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="597259" />
      <stat name="ROB_writes" value="623841" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="418270" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="218659" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26006" />
      <stat name="fp_rename_writes" value="13595" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="845558" />
      <stat name="inst_window_writes" value="387974" />
      <stat name="inst_window_wakeup_accesses" value="251481" />
      <stat name="fp_inst_window_reads" value="23823" />
      <stat name="fp_inst_window_writes" value="23133" />
      <stat name="fp_inst_window_wakeup_accesses" value="10903" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="328102" />
      <stat name="float_regfile_reads" value="16329" />
      <stat name="int_regfile_writes" value="194949" />
      <stat name="float_regfile_writes" value="8954" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="261015" />
      <stat name="fpu_accesses" value="11966" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core6.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core6.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core6.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10427.5" />
        <stat name="read_misses" value="516.5" />
        <stat name="conflicts" value="stats.system.cpu6.icache.replacements" />
      </component>
      <component id="system.core6.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38288" />
        <stat name="total_misses" value="676" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core6.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20063.0" />
        <stat name="write_accesses" value="20063.0" />
        <stat name="read_misses" value="1084.5" />
        <stat name="write_misses" value="1084.5" />
        <stat name="conflicts" value="stats.system.cpu6.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core6.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36233" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core7" name="core7">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="269918" />
      <stat name="int_instructions" value="204461" />
      <stat name="fp_instructions" value="762" />
      <stat name="branch_instructions" value="30453" />
      <stat name="branch_mispredictions" value="2684" />
      <stat name="load_instructions" value="37792" />
      <stat name="store_instructions" value="16229" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="315257" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="471077" />
      <stat name="idle_cycles" value="141154" />
      <stat name="busy_cycles" value="329923" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="604588" />
      <stat name="ROB_writes" value="621415" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="417407" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="218226" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="25937" />
      <stat name="fp_rename_writes" value="13560" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="851005" />
      <stat name="inst_window_writes" value="385868" />
      <stat name="inst_window_wakeup_accesses" value="250467" />
      <stat name="fp_inst_window_reads" value="23877" />
      <stat name="fp_inst_window_writes" value="23081" />
      <stat name="fp_inst_window_wakeup_accesses" value="10917" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="326799" />
      <stat name="float_regfile_reads" value="16393" />
      <stat name="int_regfile_writes" value="194234" />
      <stat name="float_regfile_writes" value="8977" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="259806" />
      <stat name="fpu_accesses" value="11996" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core7.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core7.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core7.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10360.5" />
        <stat name="read_misses" value="518.5" />
        <stat name="conflicts" value="stats.system.cpu7.icache.replacements" />
      </component>
      <component id="system.core7.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38143" />
        <stat name="total_misses" value="733" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core7.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20029.0" />
        <stat name="write_accesses" value="20029.0" />
        <stat name="read_misses" value="1090.0" />
        <stat name="write_misses" value="1090.0" />
        <stat name="conflicts" value="stats.system.cpu7.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core7.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36034" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core8" name="core8">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="271459" />
      <stat name="int_instructions" value="205491" />
      <stat name="fp_instructions" value="774" />
      <stat name="branch_instructions" value="30665" />
      <stat name="branch_mispredictions" value="2715" />
      <stat name="load_instructions" value="38199" />
      <stat name="store_instructions" value="16330" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="315056" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="458396" />
      <stat name="idle_cycles" value="128404" />
      <stat name="busy_cycles" value="329992" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="605950" />
      <stat name="ROB_writes" value="625081" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="419370" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="219293" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26236" />
      <stat name="fp_rename_writes" value="13719" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="854214" />
      <stat name="inst_window_writes" value="388875" />
      <stat name="inst_window_wakeup_accesses" value="251674" />
      <stat name="fp_inst_window_reads" value="23884" />
      <stat name="fp_inst_window_writes" value="23243" />
      <stat name="fp_inst_window_wakeup_accesses" value="10926" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="328309" />
      <stat name="float_regfile_reads" value="16398" />
      <stat name="int_regfile_writes" value="195128" />
      <stat name="float_regfile_writes" value="8993" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="261341" />
      <stat name="fpu_accesses" value="12001" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core8.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core8.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core8.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10450.0" />
        <stat name="read_misses" value="509.5" />
        <stat name="conflicts" value="stats.system.cpu8.icache.replacements" />
      </component>
      <component id="system.core8.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38285" />
        <stat name="total_misses" value="667" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core8.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20005.5" />
        <stat name="write_accesses" value="20005.5" />
        <stat name="read_misses" value="1144.5" />
        <stat name="write_misses" value="1144.5" />
        <stat name="conflicts" value="stats.system.cpu8.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core8.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36326" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core9" name="core9">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="270932" />
      <stat name="int_instructions" value="205098" />
      <stat name="fp_instructions" value="774" />
      <stat name="branch_instructions" value="30552" />
      <stat name="branch_mispredictions" value="2700" />
      <stat name="load_instructions" value="38030" />
      <stat name="store_instructions" value="16285" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="311548" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="458481" />
      <stat name="idle_cycles" value="132094" />
      <stat name="busy_cycles" value="326387" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="601919" />
      <stat name="ROB_writes" value="623789" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="418979" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="219015" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26265" />
      <stat name="fp_rename_writes" value="13729" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="849420" />
      <stat name="inst_window_writes" value="387864" />
      <stat name="inst_window_wakeup_accesses" value="251177" />
      <stat name="fp_inst_window_reads" value="24067" />
      <stat name="fp_inst_window_writes" value="23341" />
      <stat name="fp_inst_window_wakeup_accesses" value="11014" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="327858" />
      <stat name="float_regfile_reads" value="16523" />
      <stat name="int_regfile_writes" value="194825" />
      <stat name="float_regfile_writes" value="9068" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="260846" />
      <stat name="fpu_accesses" value="12092" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core9.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core9.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core9.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10401.5" />
        <stat name="read_misses" value="505.5" />
        <stat name="conflicts" value="stats.system.cpu9.icache.replacements" />
      </component>
      <component id="system.core9.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38263" />
        <stat name="total_misses" value="673" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core9.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20093.0" />
        <stat name="write_accesses" value="20093.0" />
        <stat name="read_misses" value="1073.0" />
        <stat name="write_misses" value="1073.0" />
        <stat name="conflicts" value="stats.system.cpu9.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core9.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36146" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core10" name="core10">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="271501" />
      <stat name="int_instructions" value="205636" />
      <stat name="fp_instructions" value="765" />
      <stat name="branch_instructions" value="30696" />
      <stat name="branch_mispredictions" value="2695" />
      <stat name="load_instructions" value="38105" />
      <stat name="store_instructions" value="16318" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="317584" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="469285" />
      <stat name="idle_cycles" value="136709" />
      <stat name="busy_cycles" value="332576" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="608824" />
      <stat name="ROB_writes" value="625636" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="419715" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="219356" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26251" />
      <stat name="fp_rename_writes" value="13719" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="856791" />
      <stat name="inst_window_writes" value="389465" />
      <stat name="inst_window_wakeup_accesses" value="251858" />
      <stat name="fp_inst_window_reads" value="23912" />
      <stat name="fp_inst_window_writes" value="23313" />
      <stat name="fp_inst_window_wakeup_accesses" value="10906" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="328457" />
      <stat name="float_regfile_reads" value="16346" />
      <stat name="int_regfile_writes" value="195311" />
      <stat name="float_regfile_writes" value="8973" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="261355" />
      <stat name="fpu_accesses" value="12014" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core10.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core10.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core10.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10438.5" />
        <stat name="read_misses" value="504.5" />
        <stat name="conflicts" value="stats.system.cpu10.icache.replacements" />
      </component>
      <component id="system.core10.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38389" />
        <stat name="total_misses" value="731" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core10.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20119.5" />
        <stat name="write_accesses" value="20119.5" />
        <stat name="read_misses" value="1089.0" />
        <stat name="write_misses" value="1089.0" />
        <stat name="conflicts" value="stats.system.cpu10.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core10.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36331" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core11" name="core11">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="270664" />
      <stat name="int_instructions" value="204937" />
      <stat name="fp_instructions" value="765" />
      <stat name="branch_instructions" value="30657" />
      <stat name="branch_mispredictions" value="2683" />
      <stat name="load_instructions" value="37981" />
      <stat name="store_instructions" value="16323" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="318750" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="469973" />
      <stat name="idle_cycles" value="136420" />
      <stat name="busy_cycles" value="333553" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="608982" />
      <stat name="ROB_writes" value="623480" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="418387" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="218785" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26112" />
      <stat name="fp_rename_writes" value="13654" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="856190" />
      <stat name="inst_window_writes" value="387591" />
      <stat name="inst_window_wakeup_accesses" value="251074" />
      <stat name="fp_inst_window_reads" value="23861" />
      <stat name="fp_inst_window_writes" value="23149" />
      <stat name="fp_inst_window_wakeup_accesses" value="10870" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="327587" />
      <stat name="float_regfile_reads" value="16320" />
      <stat name="int_regfile_writes" value="194645" />
      <stat name="float_regfile_writes" value="8960" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="260617" />
      <stat name="fpu_accesses" value="11988" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core11.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core11.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core11.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10407.0" />
        <stat name="read_misses" value="501.0" />
        <stat name="conflicts" value="stats.system.cpu11.icache.replacements" />
      </component>
      <component id="system.core11.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38262" />
        <stat name="total_misses" value="718" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core11.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20058.0" />
        <stat name="write_accesses" value="20058.0" />
        <stat name="read_misses" value="1082.5" />
        <stat name="write_misses" value="1082.5" />
        <stat name="conflicts" value="stats.system.cpu11.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core11.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36243" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core12" name="core12">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="271837" />
      <stat name="int_instructions" value="205866" />
      <stat name="fp_instructions" value="774" />
      <stat name="branch_instructions" value="30739" />
      <stat name="branch_mispredictions" value="2714" />
      <stat name="load_instructions" value="38173" />
      <stat name="store_instructions" value="16337" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="313093" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="460740" />
      <stat name="idle_cycles" value="132598" />
      <stat name="busy_cycles" value="328142" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="604628" />
      <stat name="ROB_writes" value="626438" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="420138" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="219624" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26180" />
      <stat name="fp_rename_writes" value="13685" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="853019" />
      <stat name="inst_window_writes" value="390363" />
      <stat name="inst_window_wakeup_accesses" value="252131" />
      <stat name="fp_inst_window_reads" value="23950" />
      <stat name="fp_inst_window_writes" value="23235" />
      <stat name="fp_inst_window_wakeup_accesses" value="10945" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="328555" />
      <stat name="float_regfile_reads" value="16444" />
      <stat name="int_regfile_writes" value="195542" />
      <stat name="float_regfile_writes" value="8993" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="261694" />
      <stat name="fpu_accesses" value="12035" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core12.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core12.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core12.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10463.5" />
        <stat name="read_misses" value="507.0" />
        <stat name="conflicts" value="stats.system.cpu12.icache.replacements" />
      </component>
      <component id="system.core12.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38383" />
        <stat name="total_misses" value="696" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core12.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20092.0" />
        <stat name="write_accesses" value="20092.0" />
        <stat name="read_misses" value="1102.0" />
        <stat name="write_misses" value="1102.0" />
        <stat name="conflicts" value="stats.system.cpu12.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core12.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36390" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core13" name="core13">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="272059" />
      <stat name="int_instructions" value="206051" />
      <stat name="fp_instructions" value="772" />
      <stat name="branch_instructions" value="30722" />
      <stat name="branch_mispredictions" value="2707" />
      <stat name="load_instructions" value="38175" />
      <stat name="store_instructions" value="16336" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="321265" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="471662" />
      <stat name="idle_cycles" value="135318" />
      <stat name="busy_cycles" value="336344" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="613073" />
      <stat name="ROB_writes" value="626912" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="420547" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="219829" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26215" />
      <stat name="fp_rename_writes" value="13703" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="861578" />
      <stat name="inst_window_writes" value="390664" />
      <stat name="inst_window_wakeup_accesses" value="252405" />
      <stat name="fp_inst_window_reads" value="24019" />
      <stat name="fp_inst_window_writes" value="23275" />
      <stat name="fp_inst_window_wakeup_accesses" value="11001" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="329016" />
      <stat name="float_regfile_reads" value="16541" />
      <stat name="int_regfile_writes" value="195750" />
      <stat name="float_regfile_writes" value="9058" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="261852" />
      <stat name="fpu_accesses" value="12070" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core13.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core13.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core13.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10492.0" />
        <stat name="read_misses" value="517.0" />
        <stat name="conflicts" value="stats.system.cpu13.icache.replacements" />
      </component>
      <component id="system.core13.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38486" />
        <stat name="total_misses" value="728" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core13.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20134.0" />
        <stat name="write_accesses" value="20134.0" />
        <stat name="read_misses" value="1088.0" />
        <stat name="write_misses" value="1088.0" />
        <stat name="conflicts" value="stats.system.cpu13.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core13.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36414" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core14" name="core14">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="271773" />
      <stat name="int_instructions" value="205764" />
      <stat name="fp_instructions" value="770" />
      <stat name="branch_instructions" value="30787" />
      <stat name="branch_mispredictions" value="2711" />
      <stat name="load_instructions" value="38268" />
      <stat name="store_instructions" value="16318" />
      <stat name="committed_instructions" value="200716" />
      <stat name="committed_int_instructions" value="321401" />
      <stat name="committed_fp_instructions" value="6819" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="475627" />
      <stat name="idle_cycles" value="139178" />
      <stat name="busy_cycles" value="336449" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="613124" />
      <stat name="ROB_writes" value="626742" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="420520" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="219782" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="26133" />
      <stat name="fp_rename_writes" value="13658" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="861280" />
      <stat name="inst_window_writes" value="390334" />
      <stat name="inst_window_wakeup_accesses" value="252157" />
      <stat name="fp_inst_window_reads" value="23854" />
      <stat name="fp_inst_window_writes" value="23215" />
      <stat name="fp_inst_window_wakeup_accesses" value="10915" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="328709" />
      <stat name="float_regfile_reads" value="16399" />
      <stat name="int_regfile_writes" value="195552" />
      <stat name="float_regfile_writes" value="8982" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="858" />
      <stat name="context_switches" value="34" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="261696" />
      <stat name="fpu_accesses" value="11982" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core14.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core14.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core14.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="10461.0" />
        <stat name="read_misses" value="510.0" />
        <stat name="conflicts" value="stats.system.cpu14.icache.replacements" />
      </component>
      <component id="system.core14.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="38476" />
        <stat name="total_misses" value="727" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core14.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="20122.5" />
        <stat name="write_accesses" value="20122.5" />
        <stat name="read_misses" value="1121.5" />
        <stat name="write_misses" value="1121.5" />
        <stat name="conflicts" value="stats.system.cpu14.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core14.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="36441" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="20587" />
      </component>
    </component>
    
    <component id="system.core15" name="core15">
      <!-- Core property -->
      <param name="clock_rate" value="1999.9999999999998" />
      <param name="vdd" value="1.25" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="opt_local" value="0" />
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32" />
      <param name="opcode_width" value="16" />
      <param name="x86" value="1" />
      <param name="micro_opcode_width" value="8" />
      <param name="machine_type" value="0" />
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1" />
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since 
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="8" />
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1" />
      <param name="decode_width" value="8" />
      <!-- decode_width determines the number of ports of the 
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="8" />
      <param name="peak_issue_width" value="8" />
      <!-- issue_width determines the number of ports of Issue window and other logic 
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="8" />
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2" />
      <param name="prediction_width" value="1" />
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines 
      Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1" />
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="31,31" />
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="6" />
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1" />
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="2" />
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="32" />
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16" />
      <param name="instruction_window_scheme" value="0" />
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="64" />
      <param name="fp_instruction_window_size" value="64" />
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="192" />
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16" />
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="32" />
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic, 
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="256" />
      <param name="phy_Regs_FRF_size" value="256" />
      <!-- rename logic -->
      <param name="rename_scheme" value="0" />
      <!-- can be RAM based(0) or CAM based(1) rename scheme 
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM 
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0" />
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder" />
      <param name="store_buffer_size" value="32" />
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="32" />
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="2" />
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16" />
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="885833" />
      <stat name="int_instructions" value="549806" />
      <stat name="fp_instructions" value="58629" />
      <stat name="branch_instructions" value="48140" />
      <stat name="branch_mispredictions" value="3581" />
      <stat name="load_instructions" value="101091" />
      <stat name="store_instructions" value="28679" />
      <stat name="committed_instructions" value="783489" />
      <stat name="committed_int_instructions" value="466840" />
      <stat name="committed_fp_instructions" value="224575" />
      <stat name="pipeline_duty_cycle" value="1" />
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only, 
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="645930" />
      <stat name="idle_cycles" value="158182" />
      <stat name="busy_cycles" value="487748" />
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
      performance simulator should capture the difference on accesses,
      otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="1332729" />
      <stat name="ROB_writes" value="1881016" />
      <!-- RAT accesses -->
      <stat name="rename_reads" value="990968" />
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="544305" />
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="315953" />
      <stat name="fp_rename_writes" value="173542" />
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="1794989" />
      <stat name="inst_window_writes" value="824586" />
      <stat name="inst_window_wakeup_accesses" value="639000" />
      <stat name="fp_inst_window_reads" value="472128" />
      <stat name="fp_inst_window_writes" value="256987" />
      <stat name="fp_inst_window_wakeup_accesses" value="233467" />
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="868565" />
      <stat name="float_regfile_reads" value="298527" />
      <stat name="int_regfile_writes" value="537671" />
      <stat name="float_regfile_writes" value="219658" />
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="2580" />
      <stat name="context_switches" value="43" />
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and 
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="650087" />
      <stat name="fpu_accesses" value="236240" />
      <stat name="mul_accesses" value="0" />
      <stat name="cdb_alu_accesses" value="0" />
      <stat name="cdb_mul_accesses" value="0" />
      <stat name="cdb_fpu_accesses" value="0" />
      <!-- multiple cycle accesses should be counted multiple times, 
      otherwise, McPAT can use internal counter for different floating point instructions 
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should 
      make sure all the numbers are final numbers, 
      including the explicit read/write accesses, 
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation. 
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25" />
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25" />
      <stat name="MemManU_I_duty_cycle" value="0.25" />
      <stat name="MemManU_D_duty_cycle" value="0.25" />
      <stat name="ALU_duty_cycle" value="1" />
      <stat name="MUL_duty_cycle" value="0.3" />
      <stat name="FPU_duty_cycle" value="0.3" />
      <stat name="ALU_cdb_duty_cycle" value="1" />
      <stat name="MUL_cdb_duty_cycle" value="0.3" />
      <stat name="FPU_cdb_duty_cycle" value="0.3" />
      <param name="number_of_BPT" value="2" />
      <component id="system.core15.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="local_predictor_size" value="10,3" />
        <param name="local_predictor_entries" value="1024" />
        <param name="global_predictor_entries" value="4096" />
        <param name="global_predictor_bits" value="2" />
        <param name="chooser_predictor_entries" value="4096" />
        <param name="chooser_predictor_bits" value="2" />
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core15.itlb" name="itlb">
        <param name="number_entries" value="64" />
        <stat name="total_accesses" value="0" />
        <stat name="total_misses" value="0" />
        <stat name="conflicts" value="0" />
        <!-- there is no write requests to itlb although writes happen to itlb after miss, 
        which is actually a replacement -->
      </component>
      <component id="system.core15.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss, 
        which is actually a replacement -->
        <param name="icache_config" value="32768,64,2,1,1,2,64,0" />
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="30758.5" />
        <stat name="read_misses" value="573.5" />
        <stat name="conflicts" value="stats.system.cpu15.icache.replacements" />
      </component>
      <component id="system.core15.dtlb" name="dtlb">
        <param name="number_entries" value="64" />
        <!--dual threads-->
        <stat name="total_accesses" value="147499" />
        <stat name="total_misses" value="949" />
        <stat name="conflicts" value="0" />
      </component>
      <component id="system.core15.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,64,2,1,1,2,64,0" />
        <param name="buffer_sizes" value="4,4,4,4" />
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="70050.5" />
        <stat name="write_accesses" value="70050.5" />
        <stat name="read_misses" value="1239.0" />
        <stat name="write_misses" value="1239.0" />
        <stat name="conflicts" value="stats.system.cpu15.dcache.replacements" />
      </component>
      <param name="number_of_BTB" value="2" />
      <component id="system.core15.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="5120,4,2,1, 1,3" />
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="61994" />
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="41368" />
      </component>
    </component>
    
    <component id="system.L20" name="L20">
      <!-- all the buffer related are optional -->
      <param name="L2_config" value="4096000,64,8,1,1,1,64,1" />
      <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy -->
        <param name="buffer_sizes" value="4,4,4,4" />
      <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
      <param name="clockrate" value="999.9999999999999" />
      <param name="vdd" value="0" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="ports" value="1,1,1" />
      <!-- number of r, w, and rw ports -->
      <param name="device_type" value="0" />
      <stat name="read_accesses" value="28479.0" />
      <stat name="write_accesses" value="28479.0" />
      <stat name="read_misses" value="24324.5" />
      <stat name="write_misses" value="24324.5" />
      <stat name="conflicts" value="846" /> 
      <stat name="duty_cycle" value="0.5" />
    </component>



    <!--**********************************************************************-->
    <!-- <component id="system.L30" name="L30"> -->
      <!-- <param name="L3_config" value="config.system.l3.tags.size,config.system.l3.tags.block_size,config.system.l3.tags.assoc, 16, config.system.l3.response_latency, 100,1"/> -->
      <!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
      <!-- <param name="clockrate" value="config.system.cpu_clk_domain.clock.0"/> -->
      <!-- <param name="ports" value="1,1,1"/> -->
      <!-- number of r, w, and rw ports -->
      <!-- <param name="device_type" value="0"/> -->
      <!-- <param name="vdd" value="0"/> -->
      <!-- 0 means using ITRS default vdd -->
      <!-- <param name="power_gating_vcc" value="-1"/> -->
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <!-- <param name="buffer_sizes" value="16, 16, 16, 16"/> -->
      <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
      <!-- <stat name="read_accesses" value="stats.system.l3.ReadExReq_accesses::total"/> -->
      <!-- <stat name="write_accesses" value="(stats.system.l3.overall_accesses::total - stats.system.l3.ReadExReq_accesses::total)"/> -->
      <!-- <stat name="read_misses" value="stats.system.l3.ReadExReq_misses::total"/> -->
      <!-- <stat name="write_misses" value="(stats.system.l3.overall_misses::total - stats.system.l3.ReadExReq_misses::total)"/> -->
      <!-- <stat name="conflicts" value="stats.system.l3.tags.replacements"/> -->
      <!-- <stat name="duty_cycle" value="1"/> -->
    <!-- </component> -->
    <!--**********************************************************************-->
    <component id="system.NoC0" name="noc0">
      <param name="clockrate" value="3400" />
      <param name="vdd" value="0" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="type" value="0" />
      <!--0:bus, 1:NoC , for bus no matter how many nodes sharing the bus
        at each time only one node can send req -->
      <param name="horizontal_nodes" value="1" />
      <param name="vertical_nodes" value="1" />
      <param name="has_global_link" value="0" />
      <!-- 1 has global link, 0 does not have global link -->
      <param name="link_throughput" value="1" />
      <!--w.r.t clock -->
      <param name="link_latency" value="1" />
      <!--w.r.t clock -->
      <!-- throughput >= latency -->
      <!-- Router architecture -->
      <param name="input_ports" value="1" />
      <param name="output_ports" value="1" />
      <!-- For bus the I/O ports should be 1 -->
      <param name="flit_bits" value="256" />
      <param name="chip_coverage" value="1" />
      <!-- When multiple NOC present, one NOC will cover part of the whole chip. 
        chip_coverage <=1 -->
      <param name="link_routing_over_percentage" value="0.5" />
      <!-- Links can route over other components or occupy whole area.
        by default, 50% of the NoC global links routes over other 
        components -->
      <stat name="total_accesses" value="100000" />
      <!-- This is the number of total accesses within the whole network not for each router -->
      <stat name="duty_cycle" value="1" />
    </component>
    <!--**********************************************************************-->
    <component id="system.mc" name="mc">
      <!-- Memory controllers are for DDR(2,3...) DIMMs -->
      <!-- current version of McPAT uses published values for base parameters of memory controller
      improvements on MC will be added in later versions. -->
      <param name="type" value="0" />
      <!-- 1: low power; 0 high performance -->
      <param name="mc_clock" value="1000" />
      <!--DIMM IO bus clock rate MHz-->
      <param name="vdd" value="0" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="peak_transfer_rate" value="1200" />
      <!--MB/S-->
      <param name="block_size" value="64" />
      <!--B-->
      <param name="number_mcs" value="0" />
      <!-- current McPAT only supports homogeneous memory controllers -->
      <param name="memory_channels_per_mc" value="2" />
      <param name="number_ranks" value="2" />
      <param name="withPHY" value="2" /> 
      <!-- # of ranks of each channel-->
      <param name="req_window_size_per_channel" value="32" />
      <param name="IO_buffer_size_per_channel" value="32" />
      <param name="databus_width" value="128" />
      <param name="addressbus_width" value="51" />
      <!-- McPAT will add the control bus width to the address bus width automatically -->
      <stat name="memory_accesses" value="51842" />
                                        
      <stat name="memory_reads" value="51723" />
      <stat name="memory_writes" value="119" />
      <!-- McPAT does not track individual mc, instead, it takes the total accesses and calculate 
      the average power per MC or per channel. This is sufficient for most application. 
      Further track down can be easily added in later versions. -->
    </component>
    <!--**********************************************************************-->
    <component id="system.niu" name="niu">
      <!-- On chip 10Gb Ethernet NIC, including XAUI Phy and MAC controller  -->
      <!-- For a minimum IP packet size of 84B at 10Gb/s, a new packet arrives every 67.2ns. 
         the low bound of clock rate of a 10Gb MAC is 150Mhz -->
      <param name="type" value="0" />
      <!-- 1: low power; 0 high performance -->
      <param name="clockrate" value="350" />
      <param name="vdd" value="0" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="number_units" value="0" />
      <!-- unlike PCIe and memory controllers, each Ethernet controller only have one port -->
      <stat name="duty_cycle" value="1.0" />
      <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7" />
      <!-- ratio of total achieved load to total achieve-able bandwidth  -->
      <!-- McPAT does not track individual nic, instead, it takes the total accesses and calculate 
      the average power per nic or per channel. This is sufficient for most application. -->
    </component>
    <!--**********************************************************************-->
    <component id="system.pcie" name="pcie">
      <!-- On chip PCIe controller, including Phy-->
      <!-- For a minimum PCIe packet size of 84B at 8Gb/s per lane (PCIe 3.0), a new packet arrives every 84ns. 
         the low bound of clock rate of a PCIe per lane logic is 120Mhz -->
      <param name="type" value="0" />
      <!-- 1: low power; 0 high performance -->
      <param name="withPHY" value="1" />
      <param name="clockrate" value="350" />
      <param name="vdd" value="0" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <param name="number_units" value="0" />
      <param name="num_channels" value="8" />
      <!-- 2 ,4 ,8 ,16 ,32 -->
      <stat name="duty_cycle" value="1.0" />
      <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7" />
      <!-- Percentage of total achieved load to total achieve-able bandwidth  -->
      <!-- McPAT does not track individual pcie controllers, instead, it takes the total accesses and calculate 
      the average power per pcie controller or per channel. This is sufficient for most application. -->
    </component>
    <!--**********************************************************************-->
    <component id="system.flashc" name="flashc">
      <param name="number_flashcs" value="0" />
      <param name="type" value="1" />
      <!-- 1: low power; 0 high performance -->
      <param name="withPHY" value="1" />
      <param name="peak_transfer_rate" value="200" />
      <!--Per controller sustain-able peak rate MB/S -->
      <param name="vdd" value="0" />
      <!-- 0 means using ITRS default vdd -->
      <param name="power_gating_vcc" value="-1" />
      <!-- "-1" means using default power gating virtual power supply voltage constrained by technology and computed automatically -->
      <stat name="duty_cycle" value="1.0" />
      <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7" />
      <!-- Percentage of total achieved load to total achieve-able bandwidth  -->
      <!-- McPAT does not track individual flash controller, instead, it takes the total accesses and calculate 
      the average power per fc or per channel. This is sufficient for most application -->
    </component>
    <!--**********************************************************************-->

  </component>
</component></document>